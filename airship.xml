<?xml version="1.0" encoding="UTF-8"?>
<mod>
    <action name="generate-airship">
        <object name="newmap"/>
        
        <code>
def generateAirship(newmap):
    width = 32
    height = 48
    
    newmap.resize(width, height)
    
    cx = int(width/2)
    cy = int(height/2)
    
    x0, x1 = -1, -1
    
    def getEclispseX(y, width, height):
        dx = width/height * math.sqrt((height/4+width/4)**2-(y-height/2)**2*width/height)
        x0 = int(cx + dx)
        x1 = int(cx - dx)
        return x0, x1
    
    # make ship outline
    for y in range(height):
        ox = [x0, x1]
        x0, x1 = getEclispseX(y, width, height)
        try:
            newmap.putOn(x0, y, 'ground', Entity({'class':'wall'}))
            newmap.putOn(x1, y, 'ground', Entity({'class':'wall'}))
            if ox[0] != -1 and ox[0] != x0:
                tr = range(ox[0], x0) if ox[0] &lt; x0 else range(x0+1, ox[0]+1)
                for r in tr:
                    newmap.putOn(r, y, 'ground', Entity({'class':'wall'}))
            if ox[1] != -1 and ox[1] != x1:
                tr = range(ox[1], x1) if ox[1] &lt; x1 else range(x1+1, ox[1]+1)
                for r in tr:
                    newmap.putOn(r, y, 'ground', Entity({'class':'wall'}))
        except TiledMapSizeError:
            warning('can\'t place!')
    
    y = 0
    x0, x1 = getEclispseX(y, width, height)
    
    
    
    action('map-fill-area', {'self':newmap, 'position':'ground', 'fill':'floor', 'limit':'wall', 'x':cx, 'y':cy})
    newmap.setAttr('centre', (cx, cy))
    newmap.setExist(True)
    
    
    # make some rooms
    def makeRoom(rlist):
        x0, y0 = choice(range(width)), choice(range(height))
        lesser = [(sx1, sy1) for (sx0, sy0), (sx1, sy1), n in rlist if sx0 &lt;= x0 and sy0 &lt;= y0]
        contain = [True for (sx1, sy1) in lesser if sx1 &gt; x0 and sy1 &gt; y0]
        if contain:
            return False
        
        greater = [(sx0, sy0) for (sx0, sy0), (sx1, sy1), n in rlist
                    if sx0 &gt; x0 and sy1 &gt; y0 or
                       sx1 &gt; x0 and sy0 &gt; y0
        ]
        if not greater:
            xm, ym = width, height
        else:
            xm = min(greater, key=lambda xy: xy[0])[0]
            ym = min(greater, key=lambda xy: xy[1])[1]
        if xm &lt;= x0+1 or ym &lt;= y0+1:
            return False
        x1 = choice(range(x0+1, xm))
        y1 = choice(range(y0+1, ym))
        
        debug('wtf?!')
        if choice((True, False)):
            if choice((True, False)):
                yd = y0
            else:
                yd = y1
            xd = choice(range(x0, x1))
        else:
            if choice((True, False)):
                xd = x0
            else:
                xd = x1
            yd = choice(range(y0, y1))
        
        rlist.append(((x0, y0), (x1, y1), (xd, yd)))
        
        return True
    
    def putWall(x, y):
        newmap.setContent(x, y, 'ground', Entity({'class':'wall'}))
    
    def drawWall(p0, p1):
        if p0[0] == p1[0]:
            x = p0[0]
            for y in range(p0[1], p1[1]):
                putWall(x, y)
        elif p0[1] == p1[1]:
            y = p0[1]
            for x in range(p0[0], p1[0]):
                putWall(x, y)
        else:
            raise RuntimeError('diag walls are not supported')
    
    roomNumber = choice(range(4, 8))
    rooms = []
    maxTries = 8*roomNumber
    while roomNumber &gt; 0 and maxTries &gt; 0:
        if makeRoom(rooms):
            roomNumber -= 1
        maxTries -= 1
    
    for room in rooms:
        x0, y0 = room[0]
        x1, y1 = room[1]
        drawWall((x0, y0), (x1, y0))
        drawWall((x0, y1-1), (x1, y1-1))
        drawWall((x0, y0), (x0, y1))
        drawWall((x1-1, y0), (x1-1, y1))
        
        # door
        xd, yd = room[2]
        newmap.setContent(xd, yd, 'ground', Entity({'class':'door'}))
    
    x, y = cx, cy
    # rats
    newmap.putOn(x, y, 'system', action('make-spawn', {'spawn':'make-rat', 'position':'monster', 'probability':1/16}))
    
    return True

_return = generateAirship(newmap)
        </code>
    </action>
</mod>
