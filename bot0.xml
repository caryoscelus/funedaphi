<?xml version="1.0" encoding="UTF-8"?>
<mod>
    <action name="init-bot0">
        <code>
def main():
    class Bot0:
        def __init__(self):
            super().__init__()
        
        def live(self, entity):
            if self.attack(entity):
                debug('bot attacks')
                return
            
            if self.move(entity):
                debug('bot moves!')
                return
            
            debug('bot waits..')
            self.wait(entity)
        
        def isEnemy(self, entity, x, y):
            monster = entity.onMap.getContent(x, y, 'monster')
            if monster and monster != entity:
                return True
        
        def findEnemyF(self, entity, x, y, elist):
            if self.isEnemy(entity, x, y):
                elist.append((x, y))
            return True
        
        def getFindEnemyF(self, entity, elist):
            return lambda x, y: self.findEnemyF(entity, x, y, elist)
        
        def move(self, entity):
            '''Try moving'''
            vMap = entity.mapVision()
            x, y = entity.getCoord()
            # find nearest enemy
            enemyList = []
            vMap.raytrace(x, y, self.getFindEnemyF(entity, enemyList))
            if not enemyList:
                return False
            
            md = float('inf')
            me = (-1, -1)
            for ex, ey in enemyList:
                d = max((x-ex), (y-ey))
                if d &lt; md:
                    md = d
                    me = (ex, ey)
            
            # moving to me now
            dx = me[0]-x
            dy = me[1]-y
            debug('{0}, {1}'.format(dx, dy))
            sx, sy = int(math.copysign(1, dx)), int(math.copysign(1, dy))
            if dx and dy:
                if self.tryMove(entity, sx, sy):
                    return True
                if dy &gt; dx:
                    if self.tryMove(entity, 0, dy):
                        return True
            
            if dx and self.tryMove(entity, dx, 0):
                return True
            
            return self.tryMove(entity, 0, dy)
        
        def tryMove(self, entity, dx, dy):
            t = entity.getTile(dx, dy)
            if t.get('ground') and t.get('ground').attr('standable'):
                self.moveTo(entity, dx, dy)
                return True
            return False
        
        def wait(self, entity):
            '''Just wait'''
            action('wait', {'subject':entity})
        
        def attack(self, entity):
            '''Try to attack'''
            for x in range(-1, 2):
                for y in range(-1, 2):
                    if x or y:
                        t = entity.getTile(x, y)
                        monster = t.get('monster')
                        if monster:
                            self.attackEnemy(entity, x, y)
                            return True
            return False
        
        def moveTo(self, entity, dx, dy):
            action('move', {'subject':entity, 'dx':dx, 'dy':dy})
        
        def attackEnemy(self, entity, dx, dy):
            action('fight', {'subject':entity, 'target':Direct(dx, dy)})
    
    vexport('Bot0', Bot0)

_return = main()
        </code>
    </action>
</mod>
